# This file was *autogenerated* from the file ElGamal.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_126 = Integer(126); _sage_const_204 = Integer(204); _sage_const_10 = Integer(10); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21)
"""
Bob chooses chooses:
i) A large prime P
ii) Value G = random val between with 2 <= 2 <= pA -2
iii) Y = G ^ x mod P
iv) Choose the value x randomly as the private key

Bob then computes B = r ^ dA mod pA

Sends
"""

message = _sage_const_126 

# Bobs information
P =random_prime(_sage_const_10 **_sage_const_10 ,_sage_const_10 **_sage_const_20 ) # prime
print("P: " + str(P))
#P = 389
G = randint(_sage_const_0 ,P-_sage_const_2 )
print("G: " + str(G))
#G = 320
#x = randint(2,(P) -2)
x = _sage_const_204 
print("X: " + str(x))
Y = mod(G**x,P)
print("Y: " + str(Y))

#Alice's turn to encrypt
alice_rand = randint(_sage_const_0 ,_sage_const_21 )
print ("alice_rand: " + str(alice_rand))

r2 = mod(G** alice_rand, P)
print("r2: " + str(r2))
t = mod(((Y**alice_rand) * message), P)
print("t: " + str(t))


M = (t/(r2**x)) % P

print("M: the final message... " + str(M))
